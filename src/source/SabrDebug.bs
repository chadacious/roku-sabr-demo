' Master switch for runtime debug logging and uploads
const SABR_DEBUG_ENABLED = true

function sabr_debugEnabled() as boolean
    return SABR_DEBUG_ENABLED
end function

sub sabr_log(logs as dynamic, level as integer, message as string, debugOnly = true as boolean)
    if debugOnly = false or SABR_DEBUG_ENABLED
        if IsAssociativeArray(logs) and logs.DoesExist("printl")
            logs.printl(level, message)
        end if
    end if
end sub

sub sabr_debugUploadText(debugUploadUrl as string, relativePath as string, text as string, logs = invalid as dynamic)
    if not SABR_DEBUG_ENABLED then return
    if not isValid(text) then return
    payload = text
    if not IsString(payload)
        payload = `${payload} ?? ""`
    end if
    if payload = "" then return
    sabr_debugUploadContent(debugUploadUrl, relativePath, payload, true, logs)
end sub

sub sabr_debugUploadBytes(debugUploadUrl as string, relativePath as string, bytes as dynamic, logs = invalid as dynamic)
    if not SABR_DEBUG_ENABLED then return
    if not isValid(bytes) then return

    if IsString(bytes)
        candidatePath = bytes.trim()
        if candidatePath <> ""
            fs = CreateObject("roFileSystem")
            if fs.Exists(candidatePath)
                sabr_debugUploadContent(debugUploadUrl, relativePath, candidatePath, false, logs)
                return
            end if
        end if
    end if

    sabr_debugUploadContent(debugUploadUrl, relativePath, bytes, false, logs)
end sub

sub sabr_debugUploadContent(debugUploadUrl as string, relativePath as string, content as dynamic, isText as boolean, logs = invalid as dynamic)
    if not SABR_DEBUG_ENABLED then return
    baseUrl = `${debugUploadUrl ?? ""}`
    if baseUrl = "" then return

    originalPath = `${relativePath ?? ""}`
    if originalPath = ""
        originalPath = isText ? "roku-debug-request.json" : "roku-debug-bytes.bin"
    end if

    encodedPath = sabr_debugUrlEncode(originalPath)
    if encodedPath = "" then encodedPath = originalPath

    separator = "?"
    if Instr(baseUrl, "?") > 0
        separator = "&"
    end if
    url = `${baseUrl}${separator}path=${encodedPath}`

    transfer = CreateObject("roUrlTransfer")
    if LCase(Left(url, 5)) = "https"
        transfer.SetCertificatesFile("common:/certs/ca-bundle.crt")
        transfer.InitClientCertificates()
    end if
    transfer.SetRequest("POST")
    transfer.SetUrl(url)

    success = false

    if isText
        stringPayload = content
        if not IsString(stringPayload)
            stringPayload = `${stringPayload} ?? ""`
        end if
        if isValid(stringPayload) and stringPayload <> ""
            transfer.AddHeader("Content-Type", "application/json")
            success = transfer.PostFromString(stringPayload)
        end if
    else
        transfer.AddHeader("Content-Type", "application/octet-stream")
        fs = CreateObject("roFileSystem")
        directPath = ""
        if IsString(content)
            pathCandidate = content.trim()
            if pathCandidate <> "" and fs.Exists(pathCandidate)
                directPath = pathCandidate
            end if
        end if

        if directPath <> ""
            success = transfer.PostFromFile(directPath)
        else
            tempDir = "tmp:/sabr-debug"
            fs.CreateDirectory(tempDir)
            fileName = sabr_debugSanitizeFilename(originalPath)
            if fileName = "" then fileName = "roku-debug-bytes.bin"
            tmpFilePath = `${tempDir}/${fileName}`

            bytesRef = content
            wrote = false
            if GetInterface(bytesRef, "ifByteArray") <> invalid
                wrote = bytesRef.WriteFile(tmpFilePath)
            else
                byteCopy = CreateObject("roByteArray")
                if IsString(bytesRef) and bytesRef <> ""
                    byteCopy.FromAsciiString(bytesRef)
                end if
                wrote = byteCopy.WriteFile(tmpFilePath)
            end if

            if wrote
                success = transfer.PostFromFile(tmpFilePath)
                fs.Delete(tmpFilePath)
            end if
        end if
    end if

    if success = true
        sabr_log(logs, log_level_Type.DEBUG, `[YTSABR-Debug] Uploaded debug payload to ${url}`)
    else
        sabr_log(logs, log_level_Type.WARN, `[YTSABR-Debug] Failed to upload debug payload to ${url}`, false)
    end if
end sub

function sabr_debugSanitizeFilename(value as string) as string
    if not isValid(value) then return ""
    sanitized = ""
    for i = 1 to Len(value)
        ch = Mid(value, i, 1)
        ascii = Asc(ch)
        if ch = "." or ch = "-" or ch = "_" or ch = " "
            sanitized = sanitized + ch
        else if ascii >= 48 and ascii <= 57
            sanitized = sanitized + ch
        else if ascii >= 65 and ascii <= 90
            sanitized = sanitized + ch
        else if ascii >= 97 and ascii <= 122
            sanitized = sanitized + ch
        else
            sanitized = sanitized + "_"
        end if
    end for
    return sanitized
end function

function sabr_debugUrlEncode(value as string) as string
    if not isValid(value) then return ""
    encoder = CreateObject("roUrlTransfer")
    return encoder.Escape(value)
end function

function sabr_debugNextDumpSequence() as integer
    globals = GetGlobalAA()
    if not globals.DoesExist("sabrDebugDumpSeq")
        globals.sabrDebugDumpSeq = 0
    end if
    globals.sabrDebugDumpSeq = globals.sabrDebugDumpSeq + 1
    return globals.sabrDebugDumpSeq
end function

function sabr_debugZeroPadDigits(value as dynamic, width as integer) as string
    if IsString(value)
        strValue = value
    else if IsInteger(value)
        strValue = value.toStr()
    else if IsNumber(value)
        strValue = Str(value).trim()
    else
        strValue = `${value}`
    end if

    if width <= 0 then return strValue
    while Len(strValue) < width
        strValue = "0" + strValue
    end while
    return strValue
end function

function sabr_debugBuildDumpLabel(playbackContext as object, prefix as string, requestNumber as string, rangeLabel as string, contentType = "" as string, format = invalid as dynamic, dumpCounter = invalid as dynamic) as string
    if prefix = invalid or prefix = "" then prefix = "dump"

    rn = requestNumber
    if not IsString(rn) or rn = "" then rn = "unknown"

    rangePart = rangeLabel
    if not IsString(rangePart) or rangePart = "" then rangePart = "none"

    contentLabel = contentType
    if not IsString(contentLabel) then contentLabel = ""
    if contentLabel = "" and IsAssociativeArray(playbackContext)
        contentLabel = playbackContext?.lastContentType ?? ""
    end if
    if contentLabel = "" then contentLabel = "unknown"
    if IsAssociativeArray(playbackContext)
        playbackContext["lastContentType"] = contentLabel
    end if

    itagLabel = ""
    if IsAssociativeArray(format) and isValid(format?.itag)
        itagLabel = `${format.itag}`
    end if
    if itagLabel = "" and IsAssociativeArray(playbackContext) and IsAssociativeArray(playbackContext?.lastFormat)
        itagLabel = `${playbackContext.lastFormat?.itag ?? ""}`
    end if
    if itagLabel = "" then itagLabel = "noitag"
    if IsAssociativeArray(playbackContext) and IsAssociativeArray(format)
        playbackContext["lastFormat"] = format
    end if

    batchIndex = ""
    if IsAssociativeArray(playbackContext)
        if isValid(playbackContext?.lastDumpIndex)
            batchIndex = `${playbackContext.lastDumpIndex}`
        else if isValid(playbackContext?.requestSequence)
            batchIndex = `${playbackContext.requestSequence}`
        end if
    end if
    if batchIndex = "" then batchIndex = rn

    seqLabel = sabr_debugNextDumpSequence()

    counterLabel = ""
    if isValid(dumpCounter)
        counterLabel = `${dumpCounter}`
    end if
    if counterLabel = "" then counterLabel = `${seqLabel}`

    return `roku-player/${sabr_debugZeroPadDigits(seqLabel, 6)}-${prefix}-${contentLabel}-itag${itagLabel}-${batchIndex}-${counterLabel}-${rn}-${rangePart}`
end function

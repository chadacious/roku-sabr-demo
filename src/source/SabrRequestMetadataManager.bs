' Tracks SABR request metadata keyed by request number (rn).

import "pkg:/source/isItem.bs"

function createSabrRequestMetadataManager() as object
    manager = {
        "entries": createObject("roAssociativeArray")
        "lastCleanup": sabr_metadata_timestamp()
        "entryMaxAgeMs": 3 * 60 * 1000
        "cleanupIntervalMs": 30 * 1000
    }

    manager.store = function(self as object, requestNumber as string, metadata as object) as void
        sabr_metadata_store(self, requestNumber, metadata)
    end function
    manager.fetch = function(self as object, requestNumber as string, remove = false as boolean) as dynamic
        return sabr_metadata_fetch(self, requestNumber, remove)
    end function
    manager.cleanup = function(self as object) as void
        sabr_metadata_cleanup(self)
    end function

    return manager
end function

sub sabr_metadata_store(ctx as object, requestNumber as string, metadata as object)
    if not isValid(requestNumber) or requestNumber = "" then return
    if not isValid(metadata) then return

    ctx.entries[requestNumber] = {
        "storedAt": sabr_metadata_timestamp()
        "data": metadata
    }

    now = sabr_metadata_timestamp()
    if now - ctx.lastCleanup > ctx.cleanupIntervalMs
        sabr_metadata_cleanup(ctx)
        ctx["lastCleanup"] = now
    end if
end sub

function sabr_metadata_fetch(ctx as object, requestNumber as string, remove as boolean) as dynamic
    if not isValid(requestNumber) or requestNumber = "" then return invalid

    entry = ctx.entries.Lookup(requestNumber)
    if not isValid(entry) then return invalid

    if sabr_metadata_timestamp() - entry.storedAt > ctx.entryMaxAgeMs
        ctx.entries.Delete(requestNumber)
        return invalid
    end if

    if remove then ctx.entries.Delete(requestNumber)
    return entry.data
end function

sub sabr_metadata_cleanup(ctx as object)
    now = sabr_metadata_timestamp()
    for each key in ctx.entries.keys()
        entry = ctx.entries.Lookup(key)
        if isValid(entry) and now - entry.storedAt > ctx.entryMaxAgeMs
            ctx.entries.Delete(key)
        end if
    end for
end sub

function sabr_metadata_timestamp() as integer
    dt = CreateObject("roDateTime")
    if not IsDateTime(dt) then return 0
    return (dt.AsSeconds() * 1000) + dt.GetMilliseconds()
end function
